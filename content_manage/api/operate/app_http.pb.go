// Code generated by protoc-gen-go-http. DO NOT EDIT.

package operate

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http./middleware.
const _ = http1.SupportPackageIsVersion1

type AppHTTPServer interface {
	CreateContent(context.Context, *CreateContentReq) (*CreateContentRsp, error)

	DeleteContent(context.Context, *DeleteContentReq) (*DeleteContentRsp, error)

	FindContent(context.Context, *FindContentReq) (*FindContentRsp, error)

	UpdateContent(context.Context, *UpdateContentReq) (*UpdateContentRsp, error)
}

func RegisterAppHTTPServer(s http1.ServiceRegistrar, srv AppHTTPServer) {
	s.RegisterService(&_HTTP_App_serviceDesc, srv)
}

func _HTTP_App_CreateContent_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in CreateContentReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).CreateContent(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_App_UpdateContent_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in UpdateContentReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UpdateContent(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_App_DeleteContent_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in DeleteContentReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).DeleteContent(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_App_FindContent_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error, m middleware.Middleware) (interface{}, error) {
	var in FindContentReq

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	h := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).FindContent(ctx, &in)
	}
	out, err := m(h)(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_App_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.operate.App",
	Methods: []http1.MethodDesc{

		{
			Path:    "/api.operate.App/CreateContent",
			Method:  "POST",
			Handler: _HTTP_App_CreateContent_0,
		},

		{
			Path:    "/api.operate.App/UpdateContent",
			Method:  "POST",
			Handler: _HTTP_App_UpdateContent_0,
		},

		{
			Path:    "/api.operate.App/DeleteContent",
			Method:  "POST",
			Handler: _HTTP_App_DeleteContent_0,
		},

		{
			Path:    "/api.operate.App/FindContent",
			Method:  "POST",
			Handler: _HTTP_App_FindContent_0,
		},
	},
	Metadata: "operate/app.proto",
}
